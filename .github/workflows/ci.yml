name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# ================= 全局环境（Logfire） =================
env:
  LOGFIRE_TOKEN:          ${{ secrets.LOGFIRE_TOKEN }}
  LOGFIRE_SEND_TO_LOGFIRE: "true"
  LOGFIRE_SERVICE_NAME:    "simple-tools-ci"

# ======================================================
# ① 代码质量检查（ruff / black / isort / mypy）
# ======================================================
jobs:
  lint:
    name: Lint & Type-check
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🐍 Install Python 3.13.3
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.3"

      - name: 📦 Install Poetry 2.1.3
        uses: snok/install-poetry@v1
        with:
          version: "2.1.3"
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: ♻️ Cache Poetry venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: 📥 Install deps
        run: poetry install --no-interaction --no-ansi

      - name: Set PYTHONPATH for src layout
        run: echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV

      # ---------- 运行各项检查 ----------
      - name: Ruff lint
        run: poetry run ruff check src tests

      - name: Black --check
        run: poetry run black --check src tests

      - name: isort --check
        run: poetry run isort --check-only src tests

      - name: mypy (strict)
        run: poetry run mypy --strict src/simple_tools

# ======================================================
# ② 单元测试（含覆盖率）—— 仅在 lint 通过后执行
# ======================================================
  test:
    name: Py${{ matrix.python-version }} • ${{ matrix.os }}
    needs: lint
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.13.3"]

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🐍 Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install Poetry 2.1.3
        uses: snok/install-poetry@v1
        with:
          version: "2.1.3"
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: ♻️ Cache Poetry venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: 📥 Install deps
        run: poetry install --no-interaction --no-ansi

      - name: Set PYTHONPATH for src layout
        run: echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV

      - name: Print sys.path
        run: python -c "import sys; print(sys.path)"

      - name: 🧪 Run pytest (+coverage)
        run: poetry run pytest -v

      - name: Print sys.path
        run: python -c "import sys; print(sys.path)"

      - name: 🧪 Run pytest (+coverage)
        run: |
          poetry run pytest \
              --cov=./src/simple_tools \
              --cov-report=xml \
              --cov-report=term-missing \
              --cov-fail-under=70

      - name: ☁️ Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-${{ github.run_id }}
          path: |
            coverage.xml
            htmlcov/

# ======================================================
# ③ 构建发布包 —— 仅在测试全部通过后执行
# ======================================================
  build:
    name: Build & Package
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13.3"

      - uses: snok/install-poetry@v1
        with:
          version: "2.1.3"

      - name: 📥 Install deps
        run: poetry install --no-interaction --no-ansi

      - name: Set PYTHONPATH for src layout
        run: echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV

      - name: Build wheel / sdist
        run: poetry build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.run_id }}
          path: dist/

      - name: Smoke-test install
        run: |
          pip install dist/*.whl
          tools --help
